@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <script type="text/javascript" src=@Url.Content("../../charting_library/charting_library.min.js")></script>
    <script type="text/javascript" src="@Url.Content("../../charting_library/datafeed/udf/datafeed.js")"></script>
    <script>
        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                results = regex.exec(location.search);
            return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        TradingView.onready(function () {
            var udf_datafeed = new Datafeeds.UDFCompatibleDatafeed("http://localhost:54872");

            var widget = window.tvWidget = new TradingView.widget({
                fullscreen: true,
                symbol: 'GBPUSD',
                interval: '60',
                toolbar_bg: '#f4f7f9',
                container_id: "tv_chart_container",
                //	BEWARE: no trailing slash is expected in feed URL
                datafeed: udf_datafeed,
                library_path: "charting_library/",
                locale: getParameterByName('lang') || "en",
                //	Regression Trend-related functionality is not implemented yet, so it's hidden for a while
                drawings_access: { type: 'black', tools: [{ name: "Regression Trend" }] },
                disabled_features: ["save_chart_properties_to_local_storage", "volume_force_overlay"],
                enabled_features: ["move_logo_to_main_pane", "study_templates"],
                overrides: {
                    "mainSeriesProperties.style": 0,
                    "symbolWatermarkProperties.color": "#944",
                    "volumePaneSize": "tiny"
                },
                studies_overrides: {
                    "volume.volume.color.0": "#00FFFF",
                    "volume.volume.color.1": "#0000FF",
                    "volume.volume.transparency": 70,
                    "volume.volume ma.color": "#FF0000",
                    "volume.volume ma.transparency": 30,
                    "volume.volume ma.linewidth": 5,
                    "volume.show ma": true,
                    "bollinger bands.median.color": "#33FF88",
                    "bollinger bands.upper.linewidth": 7
                },
                debug: true,
                time_frames: [
                    { text: "50y", resolution: "6M" },
                    { text: "3y", resolution: "W" },
                    { text: "8m", resolution: "D" },
                    { text: "2m", resolution: "D" },
                    { text: "1m", resolution: "60" },
                    { text: "1w", resolution: "30" },
                    { text: "7d", resolution: "30" },
                    { text: "5d", resolution: "10" },
                    { text: "3d", resolution: "10" },
                    { text: "2d", resolution: "5" },
                    { text: "1d", resolution: "5" },
                    { text: "1h", resolution: "1" },
                ],
                charts_storage_url: 'http://saveload.tradingview.com',
                charts_storage_api_version: "1.1",
                client_id: 'tradingview.com',
                user_id: 'public_user',
                favorites: {
                    intervals: ["1H","1D", "3D", "3W", "W", "M"],
                    chartTypes: ["Area", "Line"]
                }
            });

            var savedWidgetContent = null;
            var savedTemplate = null;

            widget.onChartReady(function () {

                widget.onContextMenu(function (time, price) {
                    return [{
                        position: "top",
                        text: new Date(time * 1000).toUTCString() + "; " + price.toFixed(4),
                        click: function () {
                            console.log("Custom context menu item clicked");
                        }
                    },
                    { text: "-", position: "top" },
                    { text: "-Objects Tree..." }
                    ];
                });

                widget.createButton()
                    .attr('title', "Save chart")
                    .on('click', function (e) {
                        widget.save(function (data) {
                            savedWidgetContent = data;
                            alert('Saved');
                        })
                    })
                    .append($('<span>save</span>'));

                widget.createButton()
                    .attr('title', "Load chart")
                    .on('click', function (e) {
                        if (savedWidgetContent) {
                            widget.load(savedWidgetContent);
                        }
                    })
                    .append($('<span>load</span>'));

                widget.createButton()
                    .attr('title', "Load chart")
                    .on('click', function (e) {
                        widget.load(referenceChart);
                    })
                    .append($('<span>load reference</span>'));

                widget.createButton()
                    .attr('title', "Load chart")
                    .on('click', function (e) {
                        widget.load(referenceChart2);
                    })
                    .append($('<span>load reference 2</span>'));



                widget.createButton()
                    .on('click', function (e) {
                        savedTemplate = widget.createStudyTemplate({ saveInterval: false });
                    })
                    .append($('<span>save template (-i)</span>'));

                widget.createButton()
                    .on('click', function (e) {
                        savedTemplate = widget.createStudyTemplate({ saveInterval: true });
                    })
                    .append($('<span>save template (+i)</span>'));

                widget.createButton()
                    .on('click', function (e) {
                        if (savedTemplate) {
                            widget.chart().applyStudyTemplate(savedTemplate);
                        }
                    })
                    .append($('<span>apply template</span>'));



                widget.createButton()
                    .on('click', function (e) {
                        widget.setSymbol("F", '2D');
                    })
                    .append($('<span>F, 2D</span>'));


                widget.createButton()
                    .on('click', function (e) {
                        widget.chart().clearMarks();
                    })
                    .append($('<span>Clear marks</span>'));

                widget.createButton()
                    .attr('title', "Add item")
                    .on('click', function (e) {
                        widget.chart().createStudy("Bollinger Bands", false, false, [
                            10 + parseInt(Math.random() * 10),
                            3 + parseInt(Math.random() * 3)
                        ], function (guid) {
                            console.log(guid);
                        }
                        );
                    })
                    .append($('<span>+BB</span>'));

                widget.createButton({ align: "right" })
                    .attr('title', "Add item")
                    .on('click', function (e) {
                        widget.chart().createStudy("Moving Average", false, false, [
                            10 + parseInt(Math.random() * 10)
                        ], function (guid) {
                            console.log(guid);
                        }
                        );
                    })
                    .append($('<span>+MA</span>'));

                widget.createButton({ align: "right" })
                    .attr('title', "Add item")
                    .on('click', function (e) {
                        widget.chart().createStudy("Moving Average", false, false, [
                            10 + parseInt(Math.random() * 10)
                        ], function (guid) {
                            console.log(guid);
                        },
                            { "plot.color.0": "#FF0000" }
                        );
                    })
                    .append($('<span>+MA++</span>'));

                widget.createButton({ align: "right" })
                    .attr('title', "Add item")
                    .on('click', function (e) {
                        widget.chart().createStudy('Stochastic', false, false, [12, 3, 3], null, { "%d.color": "#000000", "%k.color": "#00FF00" });
                    })
                    .append($('<span>+Stoch</span>'));


                widget.createButton()
                    .on('click', function (e) {
                        widget.chart().createOrderLine();
                    })
                    .append($('<span>new order</span>'));

                widget.createButton()
                    .on('click', function (e) {
                        widget.chart().removeAllStudies();
                    })
                    .append($('<span>rm all studies</span>'));

                widget.createButton()
                    .on('click', function (e) {
                        widget.chart().removeAllShapes();
                    })
                    .append($('<span>rm all shapes</span>'));

                widget.onGrayedObjectClicked(function (x) {
                    alert("You are not permitted to use " + x.name + "(" + x.type + ")");
                });

                widget.subscribe('onIntervalChange', function (x) {
                    console.log("onIntervalChange: " + x);
                });

                widget.onShortcut("alt+s", function () {
                    widget.chart().executeActionById("symbolSearch");
                });

                widget.createButton()
                    .on('click', function (e) {
                        widget.chart().setVisibleRange({
                            from: Date.UTC(2012, 2, 3) / 1000,
                            to: Date.UTC(2013, 3, 3) / 1000
                        });
                    })
                    .append($('<span>set view</span>'));

                widget.createButton()
                    .on('click', function (e) {
                        console.log(widget.getVisibleRange());
                    })
                    .append($('<span>get range</span>'));

                var position = widget.chart().createPositionLine()
                    .onReverse(function (text) {
                        console.log("Position reverse event");
                    })
                    .onClose(function (text) {
                        console.log("Position close event");
                    })
                    .setText("PROFIT: 71.1 (3.31%)")
                    .setQuantity("8.235")
                    .setLineLength(3);
                position.setPrice(position.getPrice() - 2);

                var order = widget.chart().createOrderLine()
                    .onMove(function () {
                        console.log("Order moved event");
                    })
                    .onCancel(function (text) {
                        console.log("Order cancel event");
                    })
                    .setText("STOP: 73.5 (5,64%)")
                    .setLineLength(3)
                    .setQuantity("2");
                order.setPrice(order.getPrice() - 2.5);

                widget.chart().createExecutionShape()
                    .setText("1,320.75 Limit Buy 1")
                    .setTextColor("rgba(255,0,0,0.5)")
                    .setArrowSpacing(25)
                    .setArrowHeight(25)
                    .setArrowColor("#F00")
                    .setTime(new Date("4 Dec 2014 00:00:00 GMT+0").valueOf() / 1000)
                    .setPrice(15.5);

                var fourMonthAgo = Math.floor(new Date().valueOf() / 1000 - 4 * 30 * 24 * 60 * 60);
                var today = Math.floor(new Date().valueOf() / 1000);

                // draw some simple technical analysis figures using drawings to show how it works
                getMinAndMaxPrice(udf_datafeed, fourMonthAgo, today,
                    function (minPrice, maxPrice, minPriceTime, maxPriceTime) {
                        widget.chart().createMultipointShape(
                            [{ time: fourMonthAgo, price: minPrice }, { time: today, price: minPrice }],
                            {
                                shape: "trend_line",
                                lock: true,
                                disableSelection: true,
                                disableSave: true,
                                disableUndo: true,
                                overrides: {
                                    showLabel: true,
                                    fontSize: 30,
                                    linewidth: 2,
                                    linecolor: "#00FF00"
                                }
                            }
                        );
                        widget.chart().createShape({ time: Math.floor((fourMonthAgo + today) / 2), price: minPrice },
                            {
                                shape: "text",
                                lock: true,
                                disableSelection: true,
                                disableSave: true,
                                disableUndo: true,
                                text: "3 month low at " + minPrice,
                                overrides: { color: "#00FF00" }
                            });
                        widget.chart().createMultipointShape(
                            [{ time: fourMonthAgo, price: maxPrice }, { time: today, price: maxPrice }],
                            {
                                shape: "trend_line",
                                lock: true,
                                disableSelection: true,
                                disableSave: true,
                                disableUndo: true,
                                overrides: {
                                    showLabel: true,
                                    fontSize: 30,
                                    linewidth: 2,
                                    linecolor: "#FF0000"
                                }
                            }
                        );
                        widget.chart().createShape({ time: Math.floor((fourMonthAgo + today) / 2), price: maxPrice },
                            {
                                shape: "text",
                                lock: true,
                                disableSelection: true,
                                disableSave: true,
                                disableUndo: true,
                                text: "3 month high at " + maxPrice,
                                overrides: { color: "#FF0000" }
                            });
                        widget.chart().createMultipointShape(
                            [{ time: maxPriceTime, price: maxPrice }, { time: minPriceTime, price: minPrice }],
                            {
                                shape: "trend_line",
                                lock: true,
                                disableSelection: true,
                                disableSave: true,
                                disableUndo: true,
                                overrides: {
                                    showLabel: true,
                                    fontSize: 30,
                                    linewidth: 2
                                }
                            }
                        );
                        widget.chart().createMultipointShape(
                            [{ time: Math.floor((maxPriceTime + minPriceTime) / 2), price: (maxPrice + minPrice) / 2 },
                            { time: Math.floor((maxPriceTime + minPriceTime) / 2) + 5 * 24 * 60 * 60, price: (maxPrice + minPrice) / 2 * 1.1 }],
                            {
                                shape: "callout",
                                lock: true,
                                disableSelection: true,
                                disableSave: true,
                                disableUndo: true,
                                text: "Trend",
                                overrides: {
                                    color: "#000000",
                                    borderColor: "#FFFFFF",
                                    transparency: "100",
                                    linewidth: 1
                                }
                            }
                        );
                    } // end of getMinAndMaxPrice callback
                ); // end of getMinAndMaxPrice
            }); // end of widget.onChartReady
        }); // end of TradingView.onready

        function getMinAndMaxPrice(udf_datafeed, time1, time2, callback) {
            var minPrice = 99999, maxPrice = 0;
            var minPriceTime, maxPriceTime;
            udf_datafeed.resolveSymbol("AAPL", function (symbolInfo) {
                udf_datafeed.getBars(symbolInfo, "D", time1, time2, function (bars) {
                    bars.forEach(function (bar) {
                        if (bar.time / 1000 >= time1 && bar.time / 1000 <= time2) {
                            if (bar.high > maxPrice) {
                                maxPrice = bar.high;
                                maxPriceTime = bar.time / 1000;
                            }
                            if (bar.low < minPrice) {
                                minPrice = bar.low;
                                minPriceTime = bar.time / 1000;
                            }
                        }
                    });
                    callback(minPrice, maxPrice, minPriceTime, maxPriceTime);
                },
                    function (err) {
                    });
            },
                function (err) {
                });
        }
    </script>

    <h3>Charting Library</h3>
    <div id="tv_chart_container" style="margin:0"></div>
</div>